name: Build Kivy Android APK

on:
  push:
    branches:
      - main # This workflow runs when you push to the 'main' branch
  workflow_dispatch: # Allows you to manually trigger the workflow from GitHub Actions tab

jobs:
  build_android:
    runs-on: ubuntu-latest # Use a fresh Ubuntu Linux environment
    env: # <---- ADD THIS BLOCK
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk # Some tools might prefer ANDROID_HOME

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Get your project files from the repository

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Use a common Python version for Buildozer

    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libssl-dev build-essential

    - name: Install Python packages
      run: |
        pip install --upgrade pip
        pip install buildozer cython 

    - name: Configure Android SDK and Install Build Tools (for Aidl and Licenses)
      run: |
        set -x # Enable verbose output for debugging

        # The ANDROID_SDK_ROOT is now set as a job-level environment variable.
        mkdir -p "$ANDROID_SDK_ROOT"

        # Download Android command-line tools
        curl -fLo android-cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip

        unzip -q android-cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
        
        # Check for nested directory and move
        if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
            mv -T "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        else
            echo "Warning: Nested cmdline-tools directory not found. Assuming flat unzip. Will attempt to link 'latest'."
            # If the unzipped content is directly in cmdline-tools, create a 'latest' symlink
            ln -s "$ANDROID_SDK_ROOT/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        fi
        
        # Add command-line tools to PATH temporarily for this script to find sdkmanager
        export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"

        # Accept all SDK licenses explicitly using printf
        printf "y\n" | sdkmanager --licenses || true
  
        # Install required Android SDK components using printf
        printf "y\n" | sdkmanager \
          "platform-tools" \
          "build-tools;33.0.2" \
          "platforms;android-33" \
          "build-tools;36.0.0" \
          "platforms;android-34" \
          "ndk;25.2.9519653" \
          || true

        # Add core SDK paths to the GitHub Actions PATH for subsequent steps
        echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
        echo "$ANDROID_SDK_ROOT/build-tools/33.0.2" >> "$GITHUB_PATH"
        echo "$ANDROID_SDK_ROOT/build-tools/36.0.0" >> "$GITHUB_PATH" # Also add 36.0.0 to PATH

        # Optional: Verify installed components and their paths (for debugging)
        echo "--- Installed SDK Components ---"
        "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --list || true
        echo "--- PATH after SDK setup ---"
        echo $PATH

    - name: Configure and Build Android APK
      run: |
        # Ensure buildozer.spec is correctly configured for your app:
        # - title, package.name, package.domain
        # - requirements (python3, kivy, plyer)
        # - source.dir = .
        # - android.add_src = bin
        # - source.include_exts = py,kv,png,jpg,gif,json
        # - android.api, android.minapi
        # (The buildozer.spec you prepared should be correct for this)
        buildozer android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk # Buildozer outputs the APKs into a 'bin' folder (created by buildozer)
