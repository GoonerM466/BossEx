name: Build Kivy Android APK
on:
  push:
    branches:
      - main # This workflow runs when you push to the 'main' branch
  workflow_dispatch: # Allows you to manually trigger the workflow from GitHub Actions tab

jobs:
  build_android:
    runs-on: ubuntu-latest # Use a fresh Ubuntu Linux environment
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk # Some tools might prefer ANDROID_HOME
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Get your project files from the repository
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Use a common Python version for Buildozer
    
    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf automake libtool m4 pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libssl-dev build-essential
    
    - name: Install Python packages
      run: |
        pip install --upgrade pip
        pip install --upgrade buildozer cython
    
    - name: Check Buildozer Version
      run: buildozer --version
    
    - name: Locate Buildozer Executable
      run: which buildozer
    
    - name: Show Buildozer Package Details
      run: pip show buildozer
    
    - name: Configure Android SDK and Install Build Tools (for Aidl and Licenses)
      run: |
        set -x # Enable verbose output for debugging
        mkdir -p "$ANDROID_SDK_ROOT"
        curl -fLo android-cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip
        unzip -q android-cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
        
        if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
            mv -T "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        else
            echo "Warning: Nested cmdline-tools directory not found. Assuming flat unzip. Will attempt to link 'latest'."
            ln -s "$ANDROID_SDK_ROOT/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        fi
        
        export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
        # Create compatibility symlinks for Buildozer's old SDK structure expectations
        echo "Creating compatibility symlinks for sdkmanager and avdmanager..."
        mkdir -p "$ANDROID_SDK_ROOT/tools/bin"
        ln -s "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "$ANDROID_SDK_ROOT/tools/bin/sdkmanager"
        if [ -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" ]; then
            ln -s "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" "$ANDROID_SDK_ROOT/tools/bin/avdmanager"
        else
            echo "avdmanager not found in cmdline-tools/latest/bin, skipping symlink."
        fi
        printf "y\n" | sdkmanager --licenses || true
        printf "y\n" | sdkmanager \
          "platform-tools" \
          "build-tools;33.0.2" \
          "platforms;android-33" \
          "build-tools;36.0.0" \
          "platforms;android-34" \
          "ndk;25.2.9519653" \
          || true
        echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
        echo "$ANDROID_SDK_ROOT/build-tools/33.0.2" >> "$GITHUB_PATH"
        echo "$ANDROID_SDK_ROOT/build-tools/36.0.0" >> "$GITHUB_PATH"
        echo "--- Installed SDK Components ---"
        sdkmanager --list || true
        echo "--- PATH after SDK setup ---"
        echo $PATH

    # Clean buildozer cache to force fresh build
    - name: Clean Buildozer Cache
      run: |
        rm -rf ~/.buildozer
        rm -rf .buildozer
        buildozer android clean || true

    # Configure and Build Android APK with verbose output
    - name: Configure and Build Android APK
      run: |
        export PYTHONUNBUFFERED=1
        buildozer android debug --verbose || {
          echo "Build failed. Attempting alternative approach..."
          
          # Try building with specific p4a bootstrap
          buildozer android debug --verbose --p4a-bootstrap sdl2 || {
            echo "Alternative build also failed. Trying with updated requirements..."
            
            # Update buildozer.spec to use newer versions
            if [ -f buildozer.spec ]; then
              # Backup original
              cp buildozer.spec buildozer.spec.bak
              
              # Update requirements to exclude problematic packages
              sed -i 's/requirements = .*/requirements = python3,kivy,plyer,android/' buildozer.spec
              
              # Try one more time
              buildozer android debug --verbose
            else
              echo "No buildozer.spec found. Creating default one..."
              buildozer init
              buildozer android debug --verbose
            fi
          }
        }
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
      if: always()  # Upload even if build partially failed but APK was created

    # Upload logs for debugging if build fails
    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/python-for-android/dist/dists/*/build.log
          .buildozer/android/platform/python-for-android/dist/dists/*/build.log.*
          .buildozer/android/app/build/outputs/logs/
      if: failure()
