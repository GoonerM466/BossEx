name: Build Kivy Android APK

on:
  push:
    branches:
      - main # This workflow runs when you push to the 'main' branch
  workflow_dispatch: # Allows you to manually trigger the workflow from GitHub Actions tab

jobs:
  build_android:
    runs-on: ubuntu-latest # Use a fresh Ubuntu Linux environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Get your project files from the repository

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Use a common Python version for Buildozer

    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libssl-dev build-essential

    - name: Install Python packages
      run: |
        pip install --upgrade pip
        pip install buildozer cython 

    - name: Configure Android SDK and Install Build Tools (for Aidl)
      run: |
        set -x # Enable verbose output for debugging

        # Set a custom Android SDK root directory for this workflow
        ANDROID_SDK_ROOT="${{ github.workspace }}/android-sdk"
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        mkdir -p "$ANDROID_SDK_ROOT"

        # Download Android command-line tools
        curl -fLo android-cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip
        unzip -q android-cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"

        # Check the actual content of the unzipped directory
        ls -F "$ANDROID_SDK_ROOT/cmdline-tools"

        # Move contents to 'latest'. Use 'mv -T' to treat destination as a file if it's a directory.
        # This handles cases where 'cmdline-tools' might be a file or a directory.
        # We'll also check if the source directory exists before moving.
        if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
            mv -T "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        else
            echo "Warning: Expected directory '$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools' not found. Skipping mv."
            # If the inner 'cmdline-tools' doesn't exist, it means the zip unzipped directly into 'cmdline-tools'
            # In that case, the tools are already at "$ANDROID_SDK_ROOT/cmdline-tools/bin"
            # We need to ensure sdkmanager is found. Let's create a symbolic link or adjust path.
            # A simpler approach is to just ensure the correct bin path is used for sdkmanager
            # and accept that 'latest' might not be created if the structure is flat.
            # For now, let's assume the nested structure is the common case.
            # If this warning appears, we might need to adjust the sdkmanager path below.
        fi
        
        # Verify the 'latest' directory structure
        ls -F "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"


        # Accept SDK licenses (required for sdkmanager to function)
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true # Add || true to prevent early exit on license acceptance issues

        # Install platform-tools, build-tools, and platform
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
          "platform-tools" \
          "build-tools;33.0.2" \
          "platforms;android-33" || true # Add || true to prevent early exit on minor sdkmanager issues

        # Add Android SDK platform-tools and build-tools to the GitHub Actions PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/build-tools/33.0.2" >> $GITHUB_PATH

    - name: Configure and Build Android APK
      run: |
        # Ensure buildozer.spec is correctly configured for your app:
        # - title, package.name, package.domain
        # - requirements (python3, kivy, plyer)
        # - source.dir = .
        # - android.add_src = bin
        # - source.include_exts = py,kv,png,jpg,gif,json
        # - android.api, android.minapi
        # (The buildozer.spec you prepared should be correct for this)
        buildozer android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk # Buildozer outputs the APKs into a 'bin' folder (created by buildozer)
