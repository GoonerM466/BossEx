name: Build Kivy Android APK
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_android:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'  # Changed from 11 to 17
        distribution: 'temurin'
    
    - name: Install required system packages
      run: |
        sudo apt update
        sudo apt install -y libtinfo5 libncurses5 wget unzip
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache Android SDK and NDK
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer/android/platform/android-sdk
          ~/.buildozer/android/platform/android-ndk-r25c
          ~/.buildozer/android/packages
        key: android-sdk-ndk-${{ runner.os }}-v7
        restore-keys: |
          android-sdk-ndk-${{ runner.os }}-
    
    - name: Cache Buildozer downloads
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer/downloads
          ~/.buildozer/android/platform/build-*
        key: buildozer-downloads-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-downloads-${{ runner.os }}-
    
    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Setup Android SDK
      run: |
        SDK_DIR="$HOME/.buildozer/android/platform/android-sdk"
        mkdir -p "$SDK_DIR"
        
        # Download Android SDK command line tools if not cached
        if [ ! -f "$SDK_DIR/cmdline-tools/latest/bin/sdkmanager" ]; then
          echo "Downloading Android SDK command line tools..."
          cd "$SDK_DIR"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          rm commandlinetools-linux-9477386_latest.zip
          
          # Create proper directory structure for cmdline-tools
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          
          # Clean up any remaining files
          rmdir cmdline-tools 2>/dev/null || true
        fi
        
        # Set environment variables
        export ANDROID_SDK_ROOT="$SDK_DIR"
        export ANDROID_HOME="$SDK_DIR"
        export PATH="$PATH:$SDK_DIR/cmdline-tools/latest/bin:$SDK_DIR/platform-tools:$SDK_DIR/build-tools/33.0.2"
        
        echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
        echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
        echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH
        echo "$SDK_DIR/build-tools/33.0.2" >> $GITHUB_PATH
        
        # Install SDK components if not already installed
        if [ ! -d "$SDK_DIR/build-tools/33.0.2" ]; then
          echo "Installing Android SDK components..."
          yes | "$SDK_DIR/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          "$SDK_DIR/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "platforms;android-21"
        fi
        
        # Create legacy tools directory structure that buildozer expects
        mkdir -p "$SDK_DIR/tools/bin"
        ln -sf "$SDK_DIR/cmdline-tools/latest/bin/sdkmanager" "$SDK_DIR/tools/bin/sdkmanager"
        
        # Verify installations
        echo "Verifying SDK installation..."
        ls -la "$SDK_DIR/build-tools/33.0.2/" || echo "Build tools not found"
        ls -la "$SDK_DIR/tools/bin/" || echo "Tools bin not found"
    
    - name: Setup Android NDK
      run: |
        NDK_DIR="$HOME/.buildozer/android/platform"
        NDK_ZIP="android-ndk-r25c-linux.zip"
        NDK_URL="https://dl.google.com/android/repository/${NDK_ZIP}"
        NDK_FOLDER="android-ndk-r25c"
        
        mkdir -p "$NDK_DIR"
        cd "$NDK_DIR"
        
        if [ ! -d "$NDK_FOLDER" ]; then
          echo "Downloading Android NDK..."
          wget --continue --tries=3 --timeout=30 "${NDK_URL}" -O "${NDK_ZIP}"
          
          if [ -f "${NDK_ZIP}" ]; then
            echo "Extracting NDK..."
            unzip -q "${NDK_ZIP}"
            rm "${NDK_ZIP}"
            echo "NDK installation complete"
          else
            echo "Failed to download NDK"
            exit 1
          fi
        else
          echo "NDK already exists, skipping download"
        fi
        
        # Set NDK environment variables
        export ANDROID_NDK_HOME="$NDK_DIR/$NDK_FOLDER"
        export ANDROID_NDK_ROOT="$NDK_DIR/$NDK_FOLDER"
        echo "ANDROID_NDK_HOME=$NDK_DIR/$NDK_FOLDER" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$NDK_DIR/$NDK_FOLDER" >> $GITHUB_ENV
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33
        # Cache pip packages
        pip cache info
    
    - name: Verify Java version
      run: |
        echo "Java version:"
        java -version
        echo "JAVA_HOME: $JAVA_HOME"
        echo "PATH: $PATH"
    
    - name: Build APK
      run: |
        # Set build environment variables
        export PYTHONUNBUFFERED=1
        export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/platform/android-ndk-r25c"
        export ANDROID_NDK_ROOT="$HOME/.buildozer/android/platform/android-ndk-r25c"
        export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2:$ANDROID_SDK_ROOT/tools/bin"
        
        # Ensure Java 17 is being used
        export JAVA_HOME=${{ env.JAVA_HOME }}
        
        # Build the APK
        buildozer android debug
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
      if: always()
    
    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/python-for-android/dist/dists/*/build.log
          .buildozer/android/platform/python-for-android/dist/dists/*/build.log.*
          .buildozer/android/app/build/outputs/logs/
          .buildozer/logs/
        if-no-files-found: ignore
      if: failure()
