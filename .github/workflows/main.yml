name: Build Kivy Android APK

on:
  push:
    branches:
      - main # This workflow runs when you push to the 'main' branch
  workflow_dispatch: # Allows you to manually trigger the workflow from GitHub Actions tab

jobs:
  build_android:
    runs-on: ubuntu-latest # Use a fresh Ubuntu Linux environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Get your project files from the repository

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Use a common Python version for Buildozer

    - name: Install Buildozer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libssl-dev build-essential

    - name: Install Python packages
      run: |
        pip install --upgrade pip
        pip install buildozer cython 

    - name: Configure Android SDK and Install Build Tools (for Aidl)
      run: |
        # Set a custom Android SDK root directory for this workflow
        # This path is relative to the runner's workspace, making it accessible to subsequent steps
        ANDROID_SDK_ROOT="${{ github.workspace }}/android-sdk"
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        mkdir -p "$ANDROID_SDK_ROOT"

        # Download Android command-line tools (latest version as of mid-2024)
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8509876_latest.zip -O android-cmdline-tools.zip
        unzip -q android-cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
        # The unzipped structure often creates another 'cmdline-tools' folder, so we move its contents
        mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

        # Accept SDK licenses (required for sdkmanager to function)
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

        # Install platform-tools, build-tools (version 33.0.2 for API 33), and platform for android-33
        # 'yes |' automatically accepts licenses during installation
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
          "platform-tools" \
          "build-tools;33.0.2" \
          "platforms;android-33"

        # Add Android SDK platform-tools and build-tools to the GitHub Actions PATH
        # This ensures 'adb', 'aidl', etc., are found by Buildozer
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2" >> $GITHUB_ENV

    - name: Configure and Build Android APK
      run: |
        # Ensure buildozer.spec is correctly configured for your app:
        # - title, package.name, package.domain
        # - requirements (python3, kivy, plyer)
        # - source.dir = .
        # - android.add_src = bin
        # - source.include_exts = py,kv,png,jpg,gif,json
        # - android.api, android.minapi
        # (The buildozer.spec you prepared should be correct for this)
        buildozer android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk # Buildozer outputs the APKs into a 'bin' folder (created by buildozer)
